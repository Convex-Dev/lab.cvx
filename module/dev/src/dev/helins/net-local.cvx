{:deploy [$.net.local (lib net local)
          $.peer      (lib peer)
          dia         (lib net local diagnostic)]}


(.log.level.set :info)


;;;;;;;;;;


;($.net.local/main 3 30)


(def kp
     (.kp.create (.gen (.gen.blob-32) {:seed 12})))

(def kp-2
     (.kp.create (.gen (.gen.blob-32) {:seed 13})))

#_($.peer/start.genesis (.kp.seed kp)
                      {:dir           "/tmp/peer"
                       :log.path      "/tmp/peer/log_0.cvx"
                       :peer+         [{:key (.kp.pubkey kp)}
                                       {:key (.kp.pubkey kp-2)}]
                       :prepare-state (fn [state]
                                        (.state.switch state)
                                        (.account.switch #12)
                                        (def prepared?
                                             true)
                                        *state*)})

#_($.peer/start.syncer (.kp.seed kp-2)
                     {:dir         "/tmp/peer"
                      :log.path    "/tmp/peer/log_1.cvx"
                      :port        18889
                      :remote.port 18888})


#_($.peer/resume (.kp.seed kp)
               {:dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_0.cvx"})

#_($.peer/resume (.kp.seed kp-2)
               {:dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_1.cvx"})


(def net
     ($.net.local/start "net"
                        1
                        {:dir "/tmp/net"}))
                 

(.client.repl {:address #12 :host "localhost" :port 18888 :key-pair kp :rtt? true})

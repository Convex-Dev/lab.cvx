{:deploy [$.client.pool           (lib client pool)
          $.net.local             (lib net local)
          $.net.test              (lib net test)
          $.peer                  (lib peer)
          $.sim.load              (lib sim load)
          $.sim.scenario.dao      (lib sim scenario dao)
          $.sim.scenario.empty    (lib sim scenario empty)
          $.sim.scenario.nft      (lib sim scenario nft)
          $.sim.scenario.oracle   (lib sim scenario oracle)
          $.sim.scenario.fungible (lib sim scenario fungible)
          $.sim.scenario.schedule (lib sim scenario schedule)
          $.sim.scenario.torus    (lib sim scenario torus)
          $.sim.scenario.transfer (lib sim scenario transfer)
          $.sim.state             (lib sim state)
          dia                     (lib net local diagnostic)]}


(.log.level.set :info)

(import asset.nft.tokens :as nft)
(import convex.asset :as asset)
(import convex.fungible :as fun)
(import convex.trust :as trust)
(import torus.exchange :as torus)


;;;;;;;;;;


;($.net.local/main 3 30)


(def kp
     (.kp.create (.gen (.gen.blob-32) {:seed 12})))

(def kp-2
     (.kp.create (.gen (.gen.blob-32) {:seed 13})))

#_($.peer/start (.kp.seed kp)
              {:config.path   "/tmp/peer/config_0.cvx"
               :dir           "/tmp/peer"
               :n.max.sibling 3
               :poll-delay    1000
               :state         "/tmp/genesis.etch"
                              #_(.state.genesis {:peer+ [{:key (.kp.pubkey kp)}
                                                       {:key  (.kp.pubkey kp-2)
                                                        :port 18889}]})})

#_($.peer/start.sync (.kp.seed kp-2)
                   {:config.path   "/tmp/peer/config_1.cvx"
                    :dir           "/tmp/peer"
                    :n.max.sibling 3
                    :port          18889
                    :poll-delay    1000
                    :remote.port   18888})


#_($.peer/resume (.kp.seed kp)
               {:config.path "/tmp/peer/config_0.cvx"
                :dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_0.cvx"})

#_($.peer/resume (.kp.seed kp-2)
               {:config.path "/tmp/peer/config_1.cvx"
                :dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_1.cvx"})

;(.client.repl {:address #12 :host "localhost" :key-pair kp :port 18889 :rtt? true})


#_($.net.local/etch "/tmp/genesis.etch"
                  {:n.peer  10
                   :prepare '(fn [state]
                               (.state.switch #12
                                              state)
                               (def test :ok)
                               *state*)})



    

(defn gs

  []

  (.db.open "/tmp/genesis.etch")
  (let [config ($.sim.scenario.transfer/state ($.net.local/state.genesis {:n.peer 3}))]
    (.db.root.write (:state config)))
  nil)


(defn local
  []
  (def net
       ($.net.local/start "net"
                          {:log.level :debug
                              ;:cmd                 '[jcvx]
                           :dir                 "/tmp/net"
                           ;:etch.origin.syncer? false
                           ;:n.max.sibling       9
                           :state               "/tmp/genesis.etch"
                           ;:state               ($.net.local/etch "/tmp/genesis.etch"
                           ;                                       {:n.peer  10
                           ;                                        ;:peer+   {0 {:stake 100}
                           ;                                        ;          1 {:stake 100}
                           ;                                        ;          2 {:stake 100}}
                           ;                                        :prepare '(fn [state]
                           ;                                                    (.state.switch #12
                           ;                                                                   state)
                           ;                                                    (def ok
                           ;                                                         true)
                           ;                                                    *state*)}) 
                           ;:poll-delay          1000000000
                       }))
  ($.net.local/load net $.sim.scenario.transfer/gen.trx {:bucket [2 1]}))

#_(def net
     ($.net.local/resume "net"
                         {:dir "/tmp/net"}))
                 


;($.net.local/repl.peer net)
;($.net.local/stop net 0)

;($.net.local/repl.client net #12)



                    

;(.state.switch ($.net.local/state.genesis {:n.peer 3}))
;(count (:accounts *state*))

;(.state.switch .account.genesis ($.net.local/state.genesis {:n.peer 3}))



;(.gen ((($.sim.scenario.oracle/gen.trx {:base.user 47 :base.oracle 147 :n.oracle 10 :n.user 100}) 50) 42))


#_($.net.test/start.genesis {:dir   "/tmp/peer"
                           :state (:state ($.sim.scenario.torus/state ($.net.test/state.genesis {:peer+ [{:host "0.0.0.0"}
                                                                                                         {:host "0.0.0.0"
                                                                                                          :port 18889}]})
                                                                      5
                                                                      50))})

#_($.net.test/start.sync 1
                       {:dir "/tmp/sync"
                        :port 18889})
                   


($.sim.load/start $.sim.scenario.torus/gen.trx {:host "3.75.204.44"})

#_($.net.test/client.repl 0 "3.70.252.87")


;($.net.test.dia.impl/block.hash+ "/Users/adam/Code/convex/clj/tool/private/aws")

#_(def net
     ($.net.test/as-fake-local {:dir "/Users/adam/Code/convex/clj/tool/private/cloud/3"}))

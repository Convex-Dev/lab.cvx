{:deploy [$.net.local (lib net local)
          $.peer      (lib peer)
          dia         (lib net local diagnostic)]}


(.log.level.set :info)


;;;;;;;;;;


;($.net.local/main 3 30)


(def kp
     (.kp.create (.gen (.gen.blob-32) {:seed 12})))

(def kp-2
     (.kp.create (.gen (.gen.blob-32) {:seed 13})))

($.peer/start (.kp.seed kp)
              {:config.path   "/tmp/peer/config_0.cvx"
               :dir           "/tmp/peer"
               :n.max.sibling 3
               :poll-delay    1000
               :state         "/tmp/genesis.etch"
                              #_(.state.genesis {:peer+ [{:key (.kp.pubkey kp)}
                                                       {:key  (.kp.pubkey kp-2)
                                                        :port 18889}]})})

($.peer/start.sync (.kp.seed kp-2)
                   {:config.path   "/tmp/peer/config_1.cvx"
                    :dir           "/tmp/peer"
                    :n.max.sibling 3
                    :port          18889
                    :poll-delay    1000
                    :remote.port   18888})


#_($.peer/resume (.kp.seed kp)
               {:config.path "/tmp/peer/config_0.cvx"
                :dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_0.cvx"})

#_($.peer/resume (.kp.seed kp-2)
               {:config.path "/tmp/peer/config_1.cvx"
                :dir         "/tmp/peer"
                :log.path    "/tmp/peer/log_1.cvx"})

(.client.repl {:address #12 :host "localhost" :key-pair kp :port 18889 :rtt? true})


#_($.net.local/etch "/tmp/genesis.etch"
                  {:n.peer  10
                   :prepare '(fn [state]
                               (.state.switch #12
                                              state)
                               (def test :ok)
                               *state*)})

#_(def net
     ($.net.local/start "net"
                        {:dir           "/tmp/net"
                         :etch.origin   "/tmp/genesis.etch"
                         :n.peer        10
                         :n.max.sibling 9
                         :poll-delay    1000}))

#_(def net
     ($.net.local/resume "net"
                         {:dir "/tmp/net"}))
                 

;($.net.local/repl.peer net)
;($.net.local/stop net 0)
;($.net.local/repl.client net #12)

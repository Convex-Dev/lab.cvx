{:deploy [$.bad.fungible (bad fungible)]}


(import convex.asset :as asset)


(def TOKEN
     (deploy ($.bad.fungible/build-token {:supply 1000000})))


;;;;;;;;;;


(.t.def transfer.bad

  (.t.is (.t.gen [amount   (.gen.such-that (fn [a]
                                             (or (< a
                                                    0)
                                                 (> a
                                                    (asset/balance TOKEN
                                                                   *address*))))
                                           (.gen.long))
                  receiver (.gen.address.user)]
           (.t.ex :ARGUMENT
                  (asset/transfer receiver
                                  [TOKEN amount])))))



(.t.def transfer.good

  (.t.is (.t.gen [amount  (.gen.such-that (fn [a]
                                            (<= 0
                                                a
                                                (asset/balance TOKEN
                                                               *address*)))
                                          (.gen.long))
                 receiver (.gen.address.user)]
           (let [balance-before (asset/balance TOKEN
                                               *address*)]
             (asset/transfer receiver
                             [TOKEN amount])
             (<= (asset/balance TOKEN
                                *address*)
                 balance-before)))))

{:deploy [$.etch.stress (lib etch stress)]}


;;;;;;;;;; Helpers


(defn tuple

  [n.long i.tuple]

  (loop [v      [i.tuple]]
    (if (< (count v) 
           n.long)
      (recur (conj v
                   i.tuple))
      v)))



(defn overhead.iter

  [n.long]

  (.log.info* "Estimating overhead")
  (let [n.tuple  1e6
        [nano
         _]      (.time.do*
                   (loop [i.tuple 0]
                     (when (< i.tuple
                              n.tuple)
                       (tuple n.long
                              (+ 0
                                 i.tuple))
                       (recur (inc i.tuple)))))
        overhead (/ nano
                    n.tuple)]
    (.log.info* (str "Overhead estimation = " overhead " nanos / tuple"))
    overhead))
  

;;;;;;;;;; Stress test


(defn integrity

  [result]

  (let [n.long  (:n.long result)
        n.tuple (:n.tuple result)]
    (.log.info* "Running iterations")
    (loop [i.tuple 0]
      (when (< i.tuple
               n.tuple)
        (let [tuple-      (tuple n.long
                                 i.tuple)
              hash.target (hash (encoding tuple-))
              cell        (.db.read hash.target)]
          (if (= cell
                 tuple-)
            (recur (inc i.tuple))
            [i.tuple
             hash.target
             (hash (encoding cell))]))))))



(defn write

  [option+]

  (let [n.long (or (:n.long option+)
                   8)]
    (when-not (<= 1
                  n.long
                  16)
      (fail :ARGUMENT
            "Number of Longs per tuple must be >= 1 and <= 16"))
    (.log.info* (str "Number of Longs / tuple = " n.long))
    (let [db.size  (.db.size)
          overhead (overhead.iter n.long)
          _        (.log.info* "Measuring writes")
          result   (loop [i.iter 0
                          result option+]
                     (if ($.etch.stress/write.size.total? option+)
                       (assoc result
                              :n.tuple
                              (* 1000000
                                 i.iter))
                       (recur (inc i.iter)
                              (let [i.tuple.iter (* i.iter
                                                    1000000)]
                                ($.etch.stress/avg.speed.current
                                  (assoc result
                                         :n.nano   (+ (:n.nano result)
                                                      (first
                                                        (.time.do*
                                                          (loop [i.tuple 0]
                                                            (when (< i.tuple
                                                                     1000000)
                                                              (.db.write (tuple n.long
                                                                                (+ i.tuple.iter
                                                                                   i.tuple)))
                                                              (recur (inc i.tuple)))))))
                                         :overhead (* 1000000
                                                      i.iter
                                                      overhead)))))))]
      (.log.info* (str "Number of tuples written = " (:n.tuple result)))
      (assoc result
             :n.long
             n.long))))

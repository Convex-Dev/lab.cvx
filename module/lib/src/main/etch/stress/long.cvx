{}


;;;;;;;;;;


(defn write

  [n.iter n.long]

  (when-not (.db.path)
    (.db.open (.fs.tmp)))
  (when-not (<= 1
                n.long
                16)
    (fail :ARGUMENT
          "Number of Longs per tuple must be >= 1 and <= 16"))
  (let [db.size (.db.size)
        [nano
         _]     (.time.do*
                  (loop [i.iter 0]
                    (when (< i.iter
                             n.iter)
                      ;(.db.write [i.iter i.iter])
                      (.db.write
                        (loop [v      [i.iter]]
                          (if (< (count v) 
                                 n.long)
                            (recur (conj v
                                         i.iter))
                            v)))
                      (recur (inc i.iter)))))
        _       (.db.flush)
        byte+   (- (.db.size)
                   db.size)]
    {:bps     (* (/ byte+
                    nano)
                 1e9)
     :byte+   byte+
     :n.iter  n.iter
     :n.long  n.long
     :nano    nano}
    ))

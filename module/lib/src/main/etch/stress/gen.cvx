{:deploy [$.math.stat (lib math stat)]}


;;;;;;;;;; Helpers


(defn gen

  [i.iter gen]

  (.log.info* (str "Round " i.iter))
  (.log.info* "Generating data")
  (.gen gen
        {:seed i.iter
         :size 100}))
  

;;;;;;;;;; Stress testing


(defn integrity

  [result]

  (let [gen-   (:gen result)
        hash+  (:hash+ result)
        n.iter (:n.iter result)
        fail   (loop [i.iter 0]
                 (when (< i.iter
                          n.iter)
                   (if (= (.db.read (get hash+
                                         i.iter))
                          (gen i.iter
                               gen-))
                     (recur (inc i.iter))
                     [i.iter
                      cell.read])))]
    (if fail
      (let [[i.iter
             cell]  fail]

        (.log.info* (str "FAIL, bad data for round " i.iter " = " cell))
        (assoc result
               :fail.cell cell
               :fail.iter i.iter))
      (do
        (.log.info* "OK, all data has been retrieved successfully")
        result))))



(defn write

  [n.iter gen]

  (when-not (.db.path)
    (.db.open (.fs.tmp)))
  (let [db.size (.db.size)]
    (loop [hash+  []
           i.iter 0
           nano+  []]
      (if (< i.iter
             n.iter)
        (let [_     (.log.info* (str "Round " i.iter))
              _     (.log.info* "Generating data")
              x     (.gen gen
                          {:seed i.iter
                           :size 100})
             _      (.log.info* "Persisting generated data")
             [t
              x-2]  (.time.do*
                      (let [hash (.db.write x)]
                        ;(.db.flush)
                        hash))]
          (recur (conj hash+
                       (hash (encoding x-2)))
                 (inc i.iter)
                 (conj nano+
                       t)))
        (do
          (.db.flush)
          (let [nano     (reduce +
                                 0
                                 nano+)
                byte+    (- (.db.size)
                            db.size)
                bps      (* (/ byte+
                               nano)
                            1e9)

                            ]
            (.log.info* "---")
            (.log.info* (str "Etch growth = " (/ byte+ 1e6) " MB"))
            (.log.info* (str "Speed = " (/ bps 1e6) " MB / second"))
            {:bps    bps
             :hash+  hash+
             :gen    gen
             :n.iter n.iter
             :nano   nano}))))))

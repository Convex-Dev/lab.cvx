{:deploy [$.etch.stress (lib etch stress)
          $.math.stat   (lib math stat)]}


;;;;;;;;;; Helpers


(defn gen

  [i.iter gen gen.seed gen.size write.size.cell]

  (.log.info* (str "Iteration " (inc i.iter)))
  (.log.info* "Generating data")
  (loop [cell       []
         gen.seed-2 gen.seed]
    (if (< (.cell.size cell)
           write.size.cell)
      (recur (conj cell
                   (.gen gen
                         {:seed gen.seed-2
                          :size gen.size}))
             (inc gen.seed-2))
      [cell
       gen.seed-2])))
  

;;;;;;;;;; Stress testing


(defn integrity

  [result]

  (let [gen-            (:gen result)
        gen.size        (:gen.size result)
        hash+           (:hash+ result)
        n.iter          (count hash+)
        write.size.cell (:write.size.cell result)]
    (loop [i.iter   0
           gen.seed (:gen.seed result)]
      (when (< i.iter
               n.iter)
        (let [hash.target  (get hash+
                                i.iter)
              cell.read    (.db.read hash.target)
              [cell.target
               gen.seed-2] (gen i.iter
                                gen-
                                gen.seed
                                gen.size
                                write.size.cell)]
          (if (= cell.read
                 cell.target)
            (recur (inc i.iter)
                   gen.seed-2)
            [i.iter
             hash.target
             (hash (encoding cell.read))]))))))



(defn write

  [option+]

  (let [n.iter          (:n.iter option+)
        _               (when n.iter
                          (.log.info* (str "Maximum number of iterations = " n.iter)))
        n.iter-2        (or n.iter
                            9223372036854775807)
        gen-            (or (:gen option+)
                            (.gen.any))
        gen.seed        (or (:gen.seed option+)
                            0)
        gen.size        (or (:gen.size option+)
                            30)
        write.size.cell (or (:write.size.cell option+)
                            10000000)]
    (.log.info* (str "Minimum cell size = " (/ write.size.cell 1e6) " MB / write"))
    (.log.info* (str "Gen seed = " gen.seed))
    (.log.info* (str "Gen size = " gen.size))
    (loop [hash+      []
           i.iter     0
           n.nano+    []
           gen.seed-2 gen.seed]
      (if (and (< i.iter
                  n.iter-2)
               (not ($.etch.stress/write.size.total? option+)))
        (let [[cell
               gen.seed-3] (gen i.iter
                                gen-
                                gen.seed-2
                                gen.size
                                write.size.cell)
             _             (.log.info* "Persisting generated data")
             [t
              cell-2]      (.time.do* (.db.write cell))]
          (recur (conj hash+
                       (hash (encoding cell-2)))
                 (inc i.iter)
                 (conj n.nano+
                       t)
                 gen.seed-3))
        {:hash+    hash+
         :gen      gen-
         :gen.seed gen.seed
         :gen.size gen.size
         :n.iter   n.iter
         :n.nano   (reduce +
                           0
                           n.nano+)
                           :write.size.cell write.size.cell}))))

{}


;;;;;;;;;; Helpers


(defn avg.speed

  [result]

  (let [etch.size.growth (- (.db.size)
                            (:etch.size.start result))
        n.nano           (:n.nano result)
        bps              (* (/ etch.size.growth
                               (- n.nano
                                  (or (:overhead result)
                                      0)))
                            1e9)]
   [bps
    etch.size.growth]))



(defn avg.speed.current

  [result]

  (let [etch.size.now (.db.size)]
    (if (>= (- etch.size.now
               (or (:etch.size.last result)
                   (:etch.size.start result)))
            (:etch.size.survey result))
      (let [[bps
             etch.size.growth] (avg.speed result)]
        (.log.info* (str "Current Etch growth = " (/ etch.size.growth 1e6) " MB"))
        (.log.info* (str "Current average speed = " (/ bps 1e6) " MB / second"))
        (assoc result
               :etch.size.last
               etch.size.now))
      result)))



(defn avg.speed.total

  [result]

  (let [[bps
         etch.size.growth] (avg.speed result)]
    (.log.info* (str "Total Etch growth = " (/ etch.size.growth 1e6) " MB"))
    (.log.info* (str "Total average speed = " (/ bps 1e6) " MB / second"))
    (assoc result
           :bps              bps
           :etch.size.growth etch.size.growth)))



(defn write.size.total?

  [result]

  (>= (- (.db.size)
         (:etch.size.start result))
      (:write.size.total result)))


;;;;;;;;;; Stress testing


(defn integrity

  [addr result]

  (.log.info* "Starting integrity check")
  (if-let [fail (addr/integrity result)]
    (let [[i.iter
           hash.target
           hash.read]  fail]
      (.log.error* (str "FAIL, bad read for iteration " i.iter))
      (.log.error* (str "Target hash = 0x" hash.target))
      (.log.error* (str "Read hash = 0x" hash.read))
      (assoc result
             :fail.iter        i.iter
             :fail.hash.read   hash.read
             :fail.hash.target hash.target))
    (do
      (.log.info* "OK, all data has been retrieved successfully")
      result)))



(defn write

  [addr option+]

  (.log.info* "Starting write phase")
  (if (.db.path)
    (.log.info* "Reusing currently open Etch instance")
    (do
      (.log.info* "Opening new Etch instance at temporary location")
      (.db.open (.fs.tmp))))
  (let [etch.path        (.db.path)
        _                (.log.info* (str "Etch path = " etch.path))
        write.size.total (or (:write.size.total option+)
                             1e10)
        _                (.log.info* (str "Etch growth target = " (/ write.size.total 1e9) " GB"))
        etch.size.survey (or (:etch.size.survey option+)
                             (min (/ write.size.total
                                     10)
                                  1e9))
        _                (.log.info* (str "Speed monitored every " (/ etch.size.survey 1e6) " MB (minimum)"))
        etch.size.start  (.db.size)
        result           (addr/write (assoc option+
                                            :etch.path        etch.path
                                            :etch.size.start  etch.size.start
                                            :etch.size.survey etch.size.survey
                                            :n.nano           0
                                            :write.size.total write.size.total))]
    (.log.info* "End of write phase")
    (avg.speed.total result)))


;;;


(defn run

  [addr option+]

  (.log.info* (str "Machine architecture = " (.sys.arch)))
  (let [os (.sys.os)]
    (.log.info* (str "OS = " (first os) " " (second os))))
  (.log.info* (str "Java version = " (first .sys.version.java) " " (second .sys.version.java)))
  (.log.info* (str "Convex version = " .sys.version.convex))
  (.log.info* (str "Shell version = " (str .sys.version.shell)))
  (integrity addr
             (write addr
                    option+)))



(defn run.process

  ^:private?

  [dir path.impl option+]

  (.process.success?
    (.process.run `[cvx
                    (let [actor+         (.dep.deploy '[$.etch.stress (lib etch stress)
                                                        impl          ~path.impl])
                          $.etch.stress  (get actor+
                                              '$.etch.stress)
                          impl           (get actor+
                                              'impl)]
                      (.log.level.set :info)
                      (.log.out.set (.file.stream.out ~(str "bench/" dir "/" (.time.iso) ".cvx")))
                      (.log.info* ~(str "Test path = " path.impl))
                      ($.etch.stress/run impl
                                         ~option+)
                      (.log.info* "Deleting Etch file")
                      (.fs.delete (.db.path)))])))

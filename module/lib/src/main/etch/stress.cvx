{}


;;;;;;;;;; Stress testing


(defn integrity

  [addr result]

  (.log.info* "Starting integrity check")
  (if-let [fail (addr/integrity result)]
    (let [[i.iter
           hash.target
           hash.read]  fail]
      (.log.error* (str "FAIL, bad read for iteration " i.iter))
      (.log.error* (str "Target hash = 0x" hash.target))
      (.log.error* (str "Read hash = 0x" hash.read))
      (assoc result
             :fail.iter        i.iter
             :fail.hash.read   hash.read
             :fail.hash.target hash.target))
    (do
      (.log.info* "OK, all data has been retrieved successfully")
      result)))



(defn write

  [addr option+]

  (.log.info* "Starting write phase")
  (if (.db.path)
    (.log.info* "Reusing currently open Etch instance")
    (do
      (.log.info* "Opening new Etch instance at temporary location")
      (.db.open (.fs.tmp))))
  (let [etch.path       (.db.path)
        _               (.log.info* (str "Etch path = " etch.path))
        etch.size.start (.db.size)
        result          (addr/write (assoc option+
                                           :etch.path       etch.path
                                           :etch.size.start etch.size.start))
        n.byte          (- (.db.size)
                            etch.size.start)
        n.nano           (:n.nano result)
        bps              (* (/ n.byte
                               (- n.nano
                                  (or (:overhead result)
                                      0)))
                            1e9)]
    (.log.info* (str "Etch growth = " (/ n.byte 1e6) " MB"))
    (.log.info* (str "Speed = " (/ bps 1e6) " MB / second"))
    (assoc result
           :bps    bps
           :n.byte n.byte)))


;;;


(defn run

  [addr option+]

  (integrity addr
             (write addr
                    option+)))

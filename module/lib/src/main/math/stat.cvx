{:doc ["Simple statistical functions."]}


;;;;;;;;;;


(defn sum

  ^{:doc {:description ["Computes the sum of a sequence of numbers."]
          :examples    [{:code (sum [1 2 3])}]
          :signature   [{:params [x+]}]}}

  [x+]

  (apply +
         x+))



(defn avg

  ^{:doc {:description ["Computes the average of a sequence of numbers."
                        ""
                        "A Map containing the precomputed `:sum` may be provided."]
          :examples    [{:code (avg [1 2 3 4 5])}]
          :signature   [{:params [x+]}
                        {:params [x+ option+]}]}}


  ([x+]

   (avg x+
        nil))


  ([x+ option+]

   (let [sum- (or (:sum option+)
                  (sum x+))]
     
     {:avg (/ sum-
              (count x+))
      :sum sum-})))
     


(defn stddev

  ^{:doc {:description ["Computes the standard deviation of a sequence of numbers."
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :avg"
                        "    Precomputed average."
                        "    See `avg`."
                        ""
                        "  :type"
                        "    Either `:population` (default) or `:sample`."]
          :examples    [{:code (stddev [1 2 3 4 5])}]
          :signature   [{:params [x+]}
                        {:params [x+ option+]}]}}


  ([x+]

   (stddev x+
           nil))


  ([x+ option+]

   (let [avg-1       (:avg option+)
         avg-2       (or avg-1
                         (:avg (avg x+)))
         n           (count x+)
         type        (:type option+)
         denominator (cond
                       ;;
                       (or (nil? type)
                           (= type
                              :population))
                       n
                       ;;
                       (= type
                          :sample)
                       (dec n)
                       ;;
                       (fail :ARGUMENT
                             (str "Unknown stddev type: "
                                  type)))]
     {:avg    avg-2
      :stddev (sqrt (/ (reduce (fn [acc x]
                                (+ acc
                                   (pow (abs (- x
                                                avg-2))
                                        2)))
                               0
                               x+)
                        denominator))})))

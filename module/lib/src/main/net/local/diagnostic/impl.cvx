{:doc ["Implementation for `(lib net local diagnostic)`"]}


;;;;;;;;;;


(defn block.hash+

  [net]

  (map (fn [peer]
         (let [[ok?
                _key
                result] (.worker.exec (:pipe peer)
                                      '(map (fn [block]
                                              (hash (encoding block)))
                                            (:blocks (.peer.order peer))))]
           (when-not ok?
             (fail :FAIL
                   (str "Unable to retrieve block hashes for Peer " (:i peer))))
           result))
       (:peer+ net)))



(defn consensus

  [net]

  (let [peer+  (:peer+ net)
        n.peer (count peer+)]
    (loop [acc    []
           i.peer 0]
      (if (< i.peer
             n.peer)
        (recur (conj acc
                     (let [[ok?
                            _key
                            status] (.worker.exec (:pipe (nth peer+
                                                              i.peer))
                                                  '(.peer.status peer))]
                       (when-not ok?
                         (fail :FAIL
                               (str "Unable to retrieve status for Peer " i.peer)))
                       (assoc status
                              :i
                              i.peer)))
               (inc i.peer))
        acc))))



(defn consensus.matrix

  [net]

  (let [hash+      (block.hash+ net)
        n.peer     (count hash+)
        consensus- (consensus net)]
    (loop [acc    []
           i.peer 0]
      (if (< i.peer
             n.peer)
        (let [cp         (:point.consensus (nth consensus-
                                                i.peer))
              peer.hash+ (nth hash+
                              i.peer)]
          (recur (conj acc
                       (loop [acc-2    []
                              i.peer-2 0]
                         (cond
                           ;;
                           (= i.peer-2
                              i.peer)
                           (recur (conj acc-2
                                        1)
                                  (inc i.peer-2))
                           ;;
                           (< i.peer-2
                              n.peer)
                           (let [peer-2.hash+ (nth hash+
                                                   i.peer-2)
                                 n.block      (min cp
                                                   (:point.consensus (nth consensus-
                                                                          i.peer-2)))]
                             (recur (conj acc-2
                                          (loop [i.block  0]
                                            (if (< i.block
                                                   n.block)
                                              (if (= (nth peer.hash+
                                                          i.block)
                                                     (nth peer-2.hash+
                                                          i.block))
                                                (recur (inc i.block))
                                                (/ i.block
                                                   n.block))
                                              1)))
                                    (inc i.peer-2)))
                           ;;
                           acc-2)))
                 (inc i.peer)))
        acc))))



(defn convergence

  [net]

  (let [n.peer     (count (:peer+ net))
        consensus- (consensus net)]
    (loop [acc    {}
           i.peer 0]
      (if (< i.peer
             n.peer)
        (recur (let [status               (nth consensus-
                                               i.peer)
                     point.consensus      (:point.consensus status)
                     hash->i.peer+        (or (get acc
                                                   point.consensus)
                                              {})
                     hash.state.consensus (:hash.state.consensus status)]
                 (assoc acc
                        point.consensus
                        (assoc hash->i.peer+
                               hash.state.consensus
                               (conj (or (get hash->i.peer+
                                              hash.state.consensus)
                                         [])
                                     i.peer))))
               (inc i.peer))
        acc))))



(defn convergence.fake

  [net]

  (reduce (fn [acc [cp hash.state.consensus->i.peer+]]
            (reduce (fn [acc-2 [hash.state.consensus i.peer+]]
                      (loop [acc-3     acc-2
                             i.peer-2+ i.peer+]
                        (if (empty? i.peer-2+)
                          acc-3
                          (let [i.peer    (first i.peer-2+)
                                i.peer-3+ (next i.peer-2+)]
                            (recur (reduce (fn [acc-4 i.peer-2]
                                             (if-let [d (divergence net
                                                                    i.peer
                                                                    i.peer-2)]
                                               (conj acc-4
                                                     [i.peer
                                                      i.peer-2])
                                               acc-4))
                                           acc-3
                                           i.peer-3+)
                                   i.peer-3+)))))
                    acc
                    hash.state.consensus->i.peer+))
          []
          (convergence net)))



(defn divergence

  [net i.peer-1 i.peer-2]

  (let [consensus- (consensus net)
        cp         (min (:point.consensus (nth consensus-
                                               i.peer-1))
                        (:point.consensus (nth consensus-
                                               i.peer-2)))
        block+     (block.hash+ net)
        block-1+   (nth block+
                        i.peer-1)
        block-2+   (nth block+
                        i.peer-2)]
    (loop [i 0]
      (if (< i
             cp)
        (let [h (nth block-1+
                     i)]
          (if (= h
                 (nth block-2+
                      i))
            (recur (inc i))
            (let [last-block-1+ (slice block-1+
                                       i
                                       cp)
                  last-block-2+ (slice block-2+
                                       i
                                       cp)]
              [cp
               (count (difference (set last-block-1+)
                                  (set last-block-2+)))
               (reduce +
                       0
                       (map (fn [b-1 b-2]
                              (if (= b-1
                                     b-2)
                                1
                                0))
                            last-block-1+
                            last-block-2+))
               last-block-1+
               last-block-2+])))
        nil))))

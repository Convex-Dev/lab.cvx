{:doc ["Helpers for starting Convex Peers, built around the tooling offered by the Convex Shell."
       ""
       "Takes care of concerns like setting up logging, allowing Peers to be resumed, etc ;"
       "so that starting a Peer can be close to a one-liner"]}


;;;;;;;;;; Helpers


(defn -start

  ^:private?

  [kp.seed resuming? option+ peer.init]

  (let [dir-              (dir option+)
        etch.path.target  (.fs.resolve (str dir- "/store.etch"))
        etch.path.current (.db.path)]
    (when (and etch.path.current
               (not (= etch.path.current
                       etch.path.target)))
      (fail :SHELL.PEER
            "Etch instance already open at a different location"))
      (let [log.stream       (.file.stream.out (or (:log.path option+)
                                                  (str dir- "/log.cvx"))
                                               {:append? resuming?})
            etch.path.origin (:etch.origin option+)
            _                (do
                               (.log.out.set log.stream)
                               (.log.info* "Launching peer")
                               (when etch.path.origin
                                 (.log.info* (str "Copying Etch from '" etch.path.origin "'"))
                                 (.fs.copy etch.path.origin
                                           etch.path.target))
                               (.log.info* (str "Opening Etch instance at '" etch.path.target "'"))
                               (.db.open etch.path.target))
            kp               (do
                               (.log.info* "Creating key pair from seed")
                               (.kp.create kp.seed))
            [peer
             config]         (do
                               (.log.info* "Initializing peer")
                               (peer.init kp))]
      (when config
        (let [path.config  (.fs.resolve (or (:config.path option+)
                                            (str dir- "/config.cvx")))]
          (.log.info* (str "Storing peer configuration at '" path.config "'"))
          (.file.write path.config
                       config)))
      (.log.info* "Starting peer")
      (.peer.start peer)
      {:dir        dir-
       :key-pair   kp
       :log.stream log.stream
       :peer       peer})))



(defn dir

  ^:private?

  [option+]

  (.fs.resolve (or (:dir option+)
                   "./")))



(defn url

  ^:private?


  ([option+]

   (url (:host option+)
        (:port option+)))


  ([host port]
   (str (or host
            "localhost")
        ":"
        (or port
            .peer.default.port))))


;;;;;;;;;; Starting peers


(defn resume

  ^{:doc {:description ["Resumes a Peer previously started with `start` or `start.sync`."
                        ""
                        "A Map of options may be provided, same as the additional options"
                        "described in `start`."]
          :examples    [{:code (resume .account.0-key)}]
          :signature   [{:params [kp.seed]}
                        {:params [kp.seed option+]}]}}


  ([kp.seed]

   (resume kp.seed
           nil))

  ([kp.seed option+]

   (when-not (.fs.exists? (str (or (:dir option+)
                                   "./")
                               "/store.etch"))
     (fail :SHELL.PEER
           "Etch file missing"))
   (-start kp.seed
           true
           option+
           (fn [kp]
             (let [pubkey      (.kp.pubkey kp)
                   config.path (.fs.resolve (or (:config.path option+)
                                                (str (dir option+) "/config.cvx")))
                   config      (do
                                 (.log.info* (str "Reading peer configuration from '" config.path "'"))
                                 (first (.file.read config.path)))]
               (let [config-2    (merge config
                                        option+)
                     remote.host (:remote.host config-2)
                     remote.port (:remote.port config-2)]
                 (.log.info* (str "Resuming peer on " (url config-2)))
                 [(if (and remote.host
                           remote.port)
                    (do
                      (.log.info* (str "Syncing against "
                                       (url remote.host
                                            remote.port)))
                      (.peer.init.sync kp
                                       config-2))
                    (do
                      (.log.info* "No sync")
                      (.peer.init kp
                                  config-2)))
                  nil]))))))



(defn start

  ^{:doc {:description ["Starts a Genesis Peer, the very first Peer that will set the"
                        "Genesis State of the network."
                        ""
                        "Key pair to use for that peer will be reconstructed from the given"
                        "seed."
                        ""
                        ""
                        "A Map of options may be provided, see `.peer.init` about:"
                        ""
                        "  :host"
                        "  :n.max.sibling"
                        "  :port"
                        "  :root-key"
                        "  :state"
                        ""
                        ""
                        "The only difference is that `:state` can be either:"
                        ""
                        "  - An existing State (e.g. see `.state.genesis`)"
                        ""
                        "  - `nil`, a State will be produced with `state.genesis`"
                        ""
                        "  - Path to an Etch instance with the State to use at the root"
                        ""
                        ""
                        "Additional options are:"
                        ""
                        "  :config.path"
                        "    Path to the path where some configuration information will be stored."
                        "    Allows resuming the peer with `resume`."
                        "    Default to `\"config.cvx\"` in `:dir`."
                        ""
                        "  :dir"
                        "    Directory to use for storing related files like logging."
                        "    Defaults to the current working directory."
                        ""
                        "  :log.level"
                        "    Log level to use."
                        "    Defaults to `:info`."
                        "    See `(?.shell '.log)."
                        ""
                        "  :log.level.out"
                        "    Path to the log file."
                        "    Default to `\"log.cvx\"` in `:dir`."
                        ""
                        ""
                        "Returns a Map containing, more importantly, `:key-pair` and `:peer`."]
          :examples    [{:code (start .account.key-0 {:state (.state.genesis)})}]
          :signature   [{:params [kp.seed]}
                        {:params [kp.seed option+]}]}}


  ([kp.seed]

   (start kp.seed
          nil))


  ([kp.seed option+]

   (let [state (:state option+)]
     (-start kp.seed
             false
             (if (str? state)
               (assoc option+
                      :etch.origin
                      state)
               option+)
             (fn [kp]
               (let [host   (or (:host option+)
                                "localhost")
                     port   (or (:port option+)
                                .peer.default.port)
                     config {:host          host
                             :n.max.sibling (:n.max.sibling option+)
                             :port          port
                             :poll-delay    (:poll-delay option+)
                             :root-key      (:root-key option+)}]
                 (.log.info* (str "Peer will run on " (url option+)))
                 [(.peer.init kp
                              (assoc config
                                     :state
                                     (cond
                                       ;;
                                       (nil? state)
                                       (.state.genesis)
                                       ;;
                                       (str? state)
                                       (.db.root.read)
                                       ;;
                                       state)))
                  config]))))))



(defn start.sync

  ^{:doc {:description ["Starts a Peer that will sync to another Peer, often a Genesis Peer,"
                        "see `start`."
                        ""
                        "A Map of options may be provided, same ones as described in `start`"
                        "(without `:state`), as well as:"
                        ""
                        "  :remote.host"
                        "    Host of the remote Peer to sync against."
                        "    Defaults to `\"localhost\"` but will typically be a public IP address."
                        ""
                        "  :remote.port"
                        "    Port of the remote Peer to sync against."
                        "    Defaults to `.peer.default.port`."
                        ""
                        "Returns a Map containing, more importantly, `:key-pair` and `:peer`."]
          :signature   [{:params [kp.seed]}
                        {:params [kp.seed option+]}]}}


  ([kp.seed]

   (start.sync kp.seed
               nil))


  ([kp.seed option+]

   (-start kp.seed
           false
           option+
           (fn [kp]
             (let [host        (or (:host option+)
                                   "localhost")
                   port        (or (:port option+)
                                   .peer.default.port)
                   remote.host (or (:remote.host option+)
                                   "localhost")
                   remote.port (or (:remote.port option+)
                                   .peer.default.port)
                   config      {:host          host
                                :n.max.sibling (:n.max.sibling option+)
                                :port          port
                                :poll-delay    (:poll-delay option+)
                                :remote.host   remote.host
                                :remote.port   remote.port
                                :root-key      (:root-key option+)}]
             (.log.info* (str "Peer will run on " (url option+)))
             (.log.info* (str "Peer will sync with " remote.host ":" remote.port))
             [(.peer.init.sync kp
                               config)
              config])))))

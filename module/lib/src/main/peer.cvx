{}


;;;;;;;;;; Helpers


(defn url

  [option+]

  (str (or (:host option+)
           "localhost")
       ":"
       (or (:port option+)
           .peer.default.port)))


;;;;;;;;;; Starting peers


(defn genesis


  ([kp.seed]

   (genesis kp.seed
            nil))


  ([kp.seed option+]

   ;; TODO. Rand stakes, f-state, restart

   (let [dir               (.fs.resolve (or (:dir option+)
                                            "./"))
         etch.path.target  (.fs.resolve (str dir "/store.etch"))
         etch.path.current (.db.path)]
     (when (and etch.path.current
                (not (= etch.path.current
                        etch.path.target)))
       (fail :SHELL.PEER
             "Etch instance already open"))
     (let [log.stream (.file.stream.out (str dir "/log.cvx"))]
       (.log.out.set log.stream)
       (.log.info* (str "Opening Etch instance at '" etch.path.target "'"))
       (.db.open etch.path.current)
       (.log.info* "Creating key pair from seed")
         (let [kp (.kp.create kp.seed)]
           (.log.info* "Creating genesis state")
           (let [peer.option+   (:peer+ option+)
                 state          (.state.genesis
                                  {:each-peer `(fn [peer]
                                                 (.log.info* (str "Preparing state for peer controlled by " (:controller peer)))
                                                 (let [pubkey (:key peer)]
                                                   (set-peer-data pubkey
                                                                  {:url (str (or (:host peer)
                                                                                 "localhost")
                                                                             ":"
                                                                             (or (:port peer)
                                                                                 .peer.default.port))})
                                                   (set-peer-stake pubkey
                                                                   (:stake peer))))
                                   :peer+     peer.option+
                                   :pubkey+   (map :key
                                                   peer.option+)})
                 _              (.log.info* "Initializing peer")
                 peer.0.option+ (first peer.option+)
                 peer           (.peer.init kp
                                            (assoc peer.0.option+
                                                   :state
                                                   state))]
             (.log.info* (str "Starting peer on " (url peer.0.option+)))
             (.peer.start peer)
             {:dir        dir
              :key-pair   kp
              :log.stream log.stream
              :peer       peer}))))))

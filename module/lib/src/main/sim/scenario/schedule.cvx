{:deploy [$.sim.state (lib sim state)]
 :doc    ["Simulation testing transaction scheduling."
          "Each new transaction schedule a new transaction."
          "Each new block automatically triggers scheduled transactions."]}


;;;;;;;;;;


(defn state

  ^{:doc {:description ["Prepares the given `state` for the simulation."
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :n.user"
                        "    Number of Users that will be simulated."
                        "    Defaults to `100`."]
          :examples    [{:code (state {:n.user 1000})}]
          :signature   [{:params [state]}
                        {:params [state option+]}]}}


  ([state]

   (recur state
          nil))

  ([state option+]

   ($.sim.state/prepare state
                        (assoc option+
                               :code.user
                               '(def x
                                     0)))))
 


(defn gen.trx

  ^{:doc {:description ["Transaction generator for this simulation."]}}

  [config]

  (let [base.user (:base.user config)
        n.user    (:n.user config)
        code      '[x
                    (schedule 0
                              (def x
                                   (inc x)))]]
    (fn [i.user]
      (let [origin (address (+ base.user
                               i.user))]
        (fn [sequence]
          (.gen.always (.trx.new.invoke origin
                                        code
                                        {:sequence sequence})))))))

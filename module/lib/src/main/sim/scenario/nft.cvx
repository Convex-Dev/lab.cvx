{:deploy [$.sim.state (lib sim state)]
 :doc    ["Simulation emulating transfers of NFTs."]}


;;;;;;;;;;


(defn state

  ^{:doc {:description ["Prepares the given `state` for the simulation."
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :n.nft-per-user"
                        "    Initial number of NFTs per User."
                        "    Users will trade those tokens with each other."
                        ""
                        "  :n.user"
                        "    Number of Users that will be simulated."
                        "    Defaults to `100`."]
          :examples    [{:code (state {:n.nft-per-user 15 :n.user 1000})}]
          :signature   [{:params [state]}
                        {:params [state option+]}]}}


  ([state]

   (recur state
          nil))


  ([state option+]

   (let [n.nft-per-user (or (:n.nft-per-user option+)
                            20)
         n.user         (or (:n.user option+)
                            100)]
     ($.sim.state/prepare
       state
       {:code.user '(do
                      (import asset.nft.tokens :as nft)
                      (import convex.asset :as asset))
        :custom    (fn [config]
                     (let [base.user (:base.user config)]
                       (loop [i.user  0
                              state-2 (:state config)]
                         (if (< i.user
                                n.user)
                           (recur (inc i.user)
                                  (let [user (address (+ base.user
                                                         i.user))]
                                    (loop [i.nft   0
                                           state-3 state-2]
                                      (if (< i.nft
                                             n.nft-per-user)
                                        (recur (inc i.nft)
                                               (second ($.sim.state/exec state-3
                                                                         user
                                                                         `(call nft
                                                                                (create-token {:name ~(str "NFT " i.nft)}
                                                                                              nil)))))
                                        state-3))))
                            (assoc config
                                   :n.nft-per-user n.nft-per-user
                                   :state          state-2)))))
        :n.user    n.user}))))



(defn gen.trx

  ^{:doc {:description ["Transaction generator for this simulation."]}}

  [config]

  (let [base.user    (:base.user config)
        n.user       (:n.user config)
        gen.receiver (.gen.fmap address
                                (.gen.long.uniform base.user
                                                   (dec (+ base.user
                                                           n.user))))]
    (fn [i.user]
      (let [origin (address (+ base.user
                               i.user))]
        (fn [sequence]
          (.gen.fmap (fn [receiver]
                       (.trx.new.invoke origin
                                        `(when-let [nft.id (first (asset/balance nft))]
                                           (asset/transfer ~receiver
                                                           [nft
                                                            nft.id]))
                                        {:sequence sequence}))
                     gen.receiver))))))

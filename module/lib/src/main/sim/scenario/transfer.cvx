{:deploy [$.state (lib state)]}


;;;;;;;;;;


(defn state

  [state n.user]

  (let [base.user       (count (:accounts state))
        balance.initial (long (/ (get-in state
                                         [:accounts
                                          (long .account.genesis)
                                          :balance])
                                 n.user))]
    (loop [i.user  0
           state-2 state]
      (if (< i.user
             n.user)
        (let [pubkey    (.kp.pubkey (.kp.create (.kp.seed.dev (+ base.user
                                                                 i.user))))
              code      `(let [addr (create-account ~pubkey)]
                           (transfer addr
                                     ~balance.initial))]
          (recur (inc i.user)
                 (second ($.state/exec state-2
                                       code))))
        {:base.user base.user
         :n.user    n.user
         :state     state-2}))))



(defn gen.trx

  [config]

  (let [base.user  (:base.user config)
        n.user     (:n.user config)
        gen.target (.gen.fmap address
                              (.gen.long.uniform base.user
                                                 (dec (+ base.user
                                                         n.user))))]
    (fn [i.user]
      (when (> i.user
               n.user)
        (fail :NOBODY
              "No account for this client"))
      (let [origin (address (+ base.user
                               i.user))]
        (fn [sequence]
          (.gen.fmap (fn [target]
                       (.trx.new.transfer origin
                                          target
                                          1
                                          {:sequence sequence}))
                     gen.target))))))

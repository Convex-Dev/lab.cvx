{:deploy [$.sim.state (lib sim state)]
 :doc    ["Simulation emulating transfers of Convex Coins, the native"
          "utility token of Convex."]}


;;;;;;;;;;


(defn state

  ^{:doc {:description ["Prepares the given `state` for the simulation."
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :n.user"
                        "    Number of Users that will be simulated."
                        "    Defaults to `100`."]}}


  ([state]

   (recur state
          nil))


  ([state option+]

   ($.sim.state/prepare state
                        option+)))



(defn gen.trx

  ^{:doc {:description ["Transaction generator for this simulation."]}}

  [config]

  (let [base.user   (:base.user config)
        n.user      (:n.user config)
        gen.receiver (.gen.fmap address
                                (.gen.long.uniform base.user
                                                   (dec (+ base.user
                                                           n.user))))]
    (fn [i.user]
      (let [origin (address (+ base.user
                               i.user))]
        (fn [sequence]
          (.gen.fmap (fn [receiver]
                       (.trx.new.transfer origin
                                          receiver
                                          1
                                          {:sequence sequence}))
                     gen.receiver))))))

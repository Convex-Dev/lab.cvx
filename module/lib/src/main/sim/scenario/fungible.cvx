{:deploy [$.sim.state (lib sim state)]}


;;;;;;;;;;


(defn state

  [state n.token n.user]

  ($.sim.state/prepare
    state
    n.user
    {:code.user '(import convex.asset :as asset)
     :custom    (fn [config]
                  (let [base.user        (:base.user config)
                        base.token       (+ base.user
                                            n.user)
                        n.token-per-user 1000000000
                        supply           (* n.token-per-user
                                            n.user)]
                    (loop [i.token 0
                           state-2 (second ($.sim.state/exec (:state config)
                                                             '(do
                                                                (import convex.asset :as asset)
                                                                (import convex.fungible :as fun))))]
                      (if (< i.token
                             n.token)
                        (recur (inc i.token)
                               (let [token (address (+ base.token
                                                       i.token))]
                                 (loop [i.user  0
                                        state-3 (second ($.sim.state/exec state-2
                                                                          `(deploy (fun/build-token {:supply ~supply}))))]
                                   (if (< i.user
                                          n.user)
                                     (recur (inc i.user)
                                            (second ($.sim.state/exec state-3
                                                                      `(asset/transfer ~(address (+ base.user
                                                                                                    i.user))
                                                                                       [~token
                                                                                        ~n.token-per-user]))))
                                     state-3))))
                        (assoc config
                               :base.token base.token
                               :n.token    n.token
                               :state      state-2)))))}))



(defn gen.trx

  [config]

  (let [base.token   (:base.token config)
        base.user    (:base.user config)
        n.token      (:n.token config)
        n.user       (:n.user config)
        gen.token    (.gen.fmap address
                                (.gen.long.uniform base.token
                                                   (dec (+ base.token
                                                           n.token))))
        gen.receiver (.gen.fmap address
                                (.gen.long.uniform base.user
                                                   (dec (+ base.user
                                                           n.user))))
        gen.param+   (.gen.tuple [gen.receiver
                                  gen.token])]
    (fn [i.user]
      (let [origin (address (+ base.user
                               i.user))]
        (fn [sequence]
          (.gen.fmap (fn [[receiver token]]
                       (.trx.new.invoke origin
                                        `(asset/transfer ~receiver
                                                         [~token
                                                          1])
                                        {:sequence sequence}))
                     gen.param+))))))

{:deploy [$.sim.state (lib sim state)]
 :doc    ["Simulation scenario emulating very simple DAO-like Smart Contracts"
          "where Users of a whitelist must vote to approve the increment of"
          "an number maintained by the DAO."]}


;;;;;;;;;;


(defn state

  ^{:doc {:description ["Prepares the given `state` for the simulation."
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :n.dao"
                        "    Number of DAOs."
                        "    Defaults to `5`."
                        ""
                        "  :n.user"
                        "    Number of Users that will be simulated, spread across DAOs."
                        "    Defaults to `100`."]
          :examples    [{:code (state {:n.dao 10 :n.user 1000})}]
          :signature   [{:params [state]}
                        {:params [state option+]}]}}


  ([state]

   (recur state
          nil))


  ([state option+]

   (let [n.dao  (or (:n.dao option+)
                    5)
         n.user (or (:n.user option+)
                    100)]
     (when (> n.dao
              n.user)
       (fail :ARGUMENT
             "Number of DAOs must be <= number of users"))
     ($.sim.state/prepare
       state
       {:custom (fn [config]
                  (let [base.user (:base.user config)
                        base.dao  (+ base.user
                                     n.user)]
                    (loop [i.dao    0
                           state-2  (:state config)]
                      (if (< i.dao
                             n.dao)
                        (recur (inc i.dao)
                               (second ($.sim.state/exec
                                         state-2
                                         `(deploy
                                            '(do
                                               (import convex.trust :as trust)
                                               (def whitelist
                                                    (deploy (trust/build-whitelist
                                                              {:whitelist ~(loop [acc    #{}
                                                                                  i.user i.dao]
                                                                             (if (< i.user
                                                                                    n.user)
                                                                               (recur (conj acc
                                                                                            (address (+ base.user
                                                                                                        i.user)))
                                                                                      (+ i.user
                                                                                         n.dao))
                                                                               acc))})))
                                              (def counter
                                                   1)
                                              (def voted
                                                   #{})
                                              (defn vote
                                                ^:callable?
                                                [bool]
                                                (when-not (trust/trusted? whitelist
                                                                          *caller*)
                                                  (fail :TRUST
                                                        "This should not happen"))
                                                (def voted
                                                     (if bool
                                                       (conj voted
                                                             *caller*)
                                                       (disj voted
                                                             *caller*)))
                                                (if (= voted
                                                       whitelist/whitelist)
                                                  (do
                                                    (def voted
                                                         #{})
                                                    (def counter
                                                         (inc counter)))
                                                  counter)))))))
                        (assoc config
                               :base.dao base.dao
                               :n.dao    n.dao
                               :state    state-2)))))
        :n.user n.user}))))



(defn gen.trx

  ^{:doc {:description ["Transaction generator for this simulation."]}}

  [config]

  (let [base.dao  (:base.dao config)
        base.user (:base.user config)
        n.dao     (:n.dao config)
        n.user    (:n.user config)
        gen.bool  (.gen.freq [[90 (.gen.always true)]
                              [10 (.gen.always false)]])]
    (fn [i.user]
      (let [origin (address (+ base.user
                               i.user))
            dao    (address (+ base.dao
                               (* 2 ; each DAO also deployed a whitelist
                                  (mod i.user
                                       n.dao))))]
        (fn [sequence]
          (.gen.fmap (fn [bool]
                       (.trx.new.call origin
                                      dao
                                      'vote
                                      [bool]
                                      {:sequence sequence}))
                     gen.bool))))))

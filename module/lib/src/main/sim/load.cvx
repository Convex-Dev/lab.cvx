{:deploy [$.client.pool (lib client pool)
          $.net         (lib net)]
 :doc    ["Starting a load generator against a Convex Network."
          ""
          "See `start`."]}


;;;;;;;;;;


(defn await

  ^{:doc {:description ["Given the output of `start`, awaits for all simulated Users"
                        "to terminate."]
          :signature   [{:params [promise+]}]}}

  [promise+]

  (.docoll .a.take
           promise+)
  nil)



(defn start

  ^{:doc {:description ["Starts a load generator against a Convex Network."
                        "Simulation scenarios store some configuration in the Genesis State, such"
                        "as the number of Users to simulate. This information is queried automatically"
                        "and the load generator will know what to do."
                        ""
                        "Requires a transaction generator matching the Genesis State of the network,"
                        "prepared for a specific simulation."
                        ""
                        "Each scenario is an Actor providing both that transaction generator (`.gen.trx`)"
                        "and a function for preparing the State (`state`)."
                        ""
                        "E.g. See '(lib sim scenario torus) for simulating Automated Market Maker"
                        "     operations."
                        ""
                        ""
                        "Results for each transactions are logged. Each entry is a tranction result, also"
                        "containing `:rtt` (number of milliseconds it took to send the transaction and get"
                        "a result fully backed up by consensus)."
                        ""
                        "Be sure to set the log level to at least INFO:"
                        ""
                        "  (.log.level.set :info)"
                        ""
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :bucket"
                        "    Several load generators can be started against a Network, as dictated by"
                        "    this option, a Vector where:"
                        "        0: Number of load generators that will be launched"
                        "        1: Index of this load generator"
                        "    Simulated users will be spread accordingly."
                        "    Defaults to `[1 0]`, meaning only 1 load generator, this one being the"
                        "    first and only one (index `0`)."
                        ""
                        "  :client.distr"
                        "    See `:distr` in `connect` from `(lib client pool)`."
                        ""
                        "  :n.client"
                        "    Number of client connections to open."
                        "    Defaults to the number of users, resulting in 1 connection per user."
                        ""
                        "  :n.iter.trx"
                        "    when this value is > 1, some scenarios support looping the transaction code"
                        "    for that many iterations."
                        ""
                        "  :n.max-client-fail"
                        "    Maximum number of times a simulated User can fail with an exception while"
                        "    transacting before giving up and terminating."
                        "    Defaults to `3`."
                        ""
                        "  :host"
                        "    Host of the Peer from which sim configuration will be queried."
                        "    Defaults to `\"localhost\"`."
                        ""
                        "  :port"
                        "    Port of the Peer from which sim configuration will be queried."
                        "    Defaults to `.peer.default.port`."
                        ""
                        "  :region"
                        "    See `:region` in `url+` from `(lib net)`."
                        ""
                        "Returns a Vector of simulated Users."
                        "Termination will occur of all Users fail beyond `:n.max-client-fail`."
                        "See `await`."]
          :signature   [{:params [gen.trx]}
                        {:params [gen.trx option+]}]}}


  ([gen.trx]

   (start gen.trx
          nil))


  ([gen.trx option+]

   (when-not (.db.path)
     (.db.open (.fs.tmp)))
   (.log.info* "Retrieving scenario configuration from peer")
   (let [[n.bucket
          i.bucket]        (or (:bucket option+)
                               [1
                                0])
         i.bucket.last     (dec n.bucket)
         _                 (when-not (<= 0
                                         i.bucket
                                         i.bucket.last)
                             (fail :ARGUMENT
                                   "Bucket index not within range"))
         _                 (do
                             (.log.info* (str "Number of buckets = "
                                              n.bucket))
                             (.log.info* (str "Bucket index = "
                                              i.bucket)))
         n.max-client-fail (or (:n.max-client-fail option+)
                               3)
         config            (.try.resrc* [client (.client.connect option+)
                                                (.client.close client)]
                             (:result (.a.take (.client.query client
                                                              .account.genesis
                                                              'config))))
         config-2          (assoc config
                                  :n.iter
                                  (or (:n.iter.trx option+)
                                      1))
         _                 (.log.info* [:scenario
                                        config-2])
         gen.trx-2         (gen.trx config-2)
         _                 (.log.info* (str "Maximum number of failures per client = "
                                            n.max-client-fail))
         n.user.total      (:n.user config-2)
         n.user.bucket     (div n.user.total
                                n.bucket)
         n.user            (+ n.user.bucket
                              (if (= i.bucket
                                     i.bucket.last)
                                (rem n.user.total
                                     n.bucket)
                                0))
         base.user.rel     (* i.bucket
                              n.user.bucket)
         base.user         (+ (:base.user config-2)
                              base.user.rel)
         _                 (.log.info* (str "First user = "
                                            (address base.user)))
         gen.seed          (long (/ 9223372036854775807
                                    n.user.total))
         n.client          (or (:n.client option+)
                               n.user)
         url.peer+         ($.net/url+ option+)
         _                 (.log.info* (str "Connecting " n.client " client(s) over " (count url.peer+) " peer(s)"))
         client.distr      (:client.distr option+)
         _                 (when client.distr
                             (.log.info* (str "Client distribution over peers = " client.distr)))
         client+           ($.client.pool/connect url.peer+
                                                  {:distr    client.distr
                                                   :n.client n.client})]
     (loop [acc    []
            i.user 0]
       (if (< i.user
              n.user)
         (recur (conj acc
                      (.a.do*
                        (let [[ok?
                               x]  (.state.safe*
                                     (let [addr.long (+ base.user
                                                        i.user)
                                           addr      (address addr.long)
                                           client    (nth client+
                                                          (mod i.user
                                                               n.client))
                                           kp        (.kp.create (.kp.seed.dev addr.long))
                                           gen.trx-3 (gen.trx-2 (+ base.user.rel
                                                                   i.user))]
                                       ;(.time.sleep (.gen (.gen.long.uniform 0
                                       ;                                      50)))
                                       (loop [gen.seed-2 (* gen.seed
                                                            i.user)
                                              n.fail     0
                                              sequence   1]
                                         (let [trx  (.kp.sign kp
                                                              (.gen (gen.trx-3 sequence)
                                                                    {:seed gen.seed-2}))
                                               [ok?
                                                x]  (.state.safe*
                                                      (.time.do*
                                                        (.a.take (.client.transact client
                                                                                   trx))))]
                                           (if ok?
                                             (let [[rtt
                                                    result] x]
                                               (.log.info* [:client.result
                                                            (assoc result
                                                                   :address addr
                                                                   :rtt     (/ rtt
                                                                               1e6))])
                                               (let [[ok?
                                                      x]  (.state.safe*
                                                            (if (= (:error result)
                                                                   :SEQUENCE)
                                                              (.a.take (.client.sequence client
                                                                                         addr))
                                                              (inc sequence)))]
                                                 (if ok?
                                                   (recur
                                                     (inc gen.seed-2)
                                                     n.fail
                                                     x)
                                                   (.log.error* [:client.fail.sequence
                                                                 {:address addr}]))))
                                            (do
                                              (.log.error* [:client.fail {:address addr
                                                                          :i.fail  n.fail}])
                                              (if (< n.fail
                                                     n.max-client-fail)
                                                (recur
                                                  gen.seed-2
                                                  (inc n.fail)
                                                  (inc sequence))
                                                (.log.info* [:client.fail.final
                                                             {:address addr}]))))))))]
                          (when-not ok?
                            (.log.error* [:client.exception 
                                          {:address   addr
                                           :exception x}])))))
                (inc i.user))
         acc)))))

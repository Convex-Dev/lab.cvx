{:doc ["Helpers for preparing States for simulations."]}


;;;;;;;;;;


; (defn create-user
; 
;   ([env.gen]
; 
;    (let [addr-caller *address*
;          addr-new    (deploy `(do
;                                 (set-key ~(.gen (.gen.blob-32)))
;                                 ~(env.def.code (.gen env.gen
;                                                      {:size 10}))))]
;      (.account.switch .account.genesis)
;      (transfer addr-new
;                10000000000)
;      (.account.switch addr-caller)
;      addr-new)))
; 
; 
; 
; (defn create-user+
; 
;   [n-account]
; 
;   (when (< n-account
;            1)
;     (fail :ARGUMENT
;           "Must generate at least 1 account"))
;    (let [-env.gen (env.gen)
;          addr.first (create-user -env.gen)]
;     (loop [addr.last addr.first
;            i         (dec n-account)]
;       (if (> i
;              0)
;         (recur (create-user -env.gen)
;                (dec i))
;         [addr.first
;          addr.last]))))
; 
; 
; 
; (defn env.def
; 
;   [env]
; 
;   (eval (env.def.code env))
;   env)
; 
; 
; 
; (defn env.def.code
; 
;   [env]
; 
;   (cons 'do
;         (reduce (fn [acc [sym v]]
;                   (conj acc
;                         `(def ~sym
;                               (quote ~v))))
;                 []
;                 env)))
; 
; 
; 
; (defn env.gen
; 
;   []
; 
;   (.gen.map (.gen.syntax (.gen.symbol))
;             (.gen.any)))


;;;;;;;;;;


(defn exec

  ^{:doc {:description ["Executes some the given `code` in the given `state` under the"
                        "given `addr`ess." 
                        ""
                        "Address defaults to `.account.genesis`."
                        ""
                        "Returns a Vector where:"
                        ""
                        "  0: Result of executing the code"
                        "  1: State resulting from executing the code"]
          :examples    [{:code (exec (.state.genesis) '(def hello :world))}]
          :signature   [{:params [state code]}
                        {:params [state addr code]}]}}


  ([state code]

    (exec state
          nil
          code))


  ([state addr code]

   (let [addr-2 (or addr
                    .account.genesis)
         eval   eval
         [ok?
          x]    (.state.tmp*
                  (.state.switch addr-2
                                 state)
                  [(eval code)
                   *state*])]
     (if ok?
       x
       (.ex.rethrow x)))))



(defn prepare

  ^{:doc {:description ["Prepares the given `state` by creating N User Accounts, transferring funds to them,"
                        "and optionally running some code in each account."
                        ""
                        ""
                        "Amount transferred to each newly created User Accounts will be:"
                        ""
                        "  Balance of `.account.genesis` in `state` / 2 / N User Accounts"
                        ""
                        ""
                        "A Map of options may be provided:"
                        ""
                        "  :code.user"
                        "    Code to run in each newly created User Account."
                        "    E.g. Importing a library"
                        ""
                        "  :n.user"
                        "    Number of User Accounts to create."
                        "    Defaults to `100`."
                        ""
                        "Returns a Map where:"
                        ""
                        "  :base.user"
                        "    Address of the first newly created User Account (as a Long)."
                        ""
                        "  :n.user"
                        "    How many User Accounts were created."

                        "  :state"
                        "    Resulting State."]
          :examples    [{:code (prepare (.state.genesis {:n.user 1000 :code '(import convex.asset :as asset)}))}]
          :signature   [{:params [state]}
                        {:params [state option+]}]}}


  ([state]

    (prepare state
             nil))


  ([state option+]

   (let [base.user       (count (:accounts state))
         n.user          (or (:n.user option+)
                             100)
         balance.initial (long (/ (get-in state
                                          [:accounts
                                           (long .account.genesis)
                                           :balance])
                                  2
                                  n.user))
         code.user       (:code.user option+)]
     (loop [i.user  0
            state-2 state]
       (if (< i.user
              n.user)
         (recur (inc i.user)
                (second (exec state-2
                              `(let [user (deploy '(do
                                                     (set-key ~(.kp.pubkey (.kp.create (.kp.seed.dev (+ base.user
                                                                                                        i.user)))))
                                                     ~code.user))]
                                 (transfer user
                                           ~balance.initial)))))
         (let [config   {:base.user base.user
                         :gen.seed  0
                         :n.user    n.user
                         :state     state-2}
               custom   (:custom option+)
               config-2 (if custom
                          (custom config)
                          config)]
           (assoc config-2
                  :state
                  (second (exec (:state config-2)
                                `(def config
                                      ~(dissoc config-2
                                               :gen.seed
                                               :state)))))))))))

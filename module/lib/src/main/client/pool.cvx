{:doc ["Managing pools of client connections"]}


;;;;;;;;;;


(defn connect

  ^{:doc {:description ["Returns a Vector of clients connected to Convex peers."
                        ""
                        "URLs are provided in a Vector of Maps containing:"
                        ""
                        "  :host"
                        "    Peer host."
                        "    Defaults to `\"localhost\"`."
                        ""
                        "  :port"
                        "    Peer port."
                        "    Defaults to `.peer.default.port"
                        ""
                        "Number of clients default to the number of peers."]
          :examples    [{:code (connect 20 {:host "123.42.24.321"}) }]
          :signature   [{:params [url+]}
                        {:params [n.client url+]}]}}


  ([url+]

   (connect nil
            url+))


  ([n.client url+]

   (when (and n.client
              (< n.client
                 1))
     (fail :ARGUMENT
           "Must start at least 1 client"))
   (when (empty? url+)
     (fail :ARGUMENT
           "Must provide at least 1 end point"))
   (let [n.url      (count url+)
         n.client-2 (or n.client
                        n.url)]
     (loop [acc []
            i   0]
       (if (< i
              n.client-2)
         (recur (conj acc
                      (.client.connect (nth url+
                                            (mod i
                                                 n.url))))
                (inc i))
         acc)))))



(defn close

  ^{:doc {:description ["Closes a Vector of clients."
                        "Returns `nil`."
                        ""
                        "See `connect`."]
          :examples    [{:code (close (connect 20 {:host "123.42.24.321"}))}]
          :signature   [{:params [client+]}]}}

  [client+]

  (reduce (fn [_ client]
            (.client.close client))
          nil
          client)
  nil)

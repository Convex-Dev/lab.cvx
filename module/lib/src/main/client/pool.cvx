{}


;;;;;;;;;;


(defn connect


  ([url+]

   (connect nil
            url+))


  ([n.client url+]

   (when (and n.client
              (< n.client
                 1))
     (fail :ARGUMENT
           "Must start at least 1 client"))
   (when (empty? url+)
     (fail :ARGUMENT
           "Must provide at least 1 end point"))
   (let [n.url      (count url+)
         n.client-2 (or n.client
                        n.url)]
     (loop [acc []
            i   0]
       (if (< i
              n.client-2)
         (recur (conj acc
                      (.client.connect (nth url+
                                            (mod i
                                                 n.url))))
                (inc i))
         acc)))))



(defn close

  [pool]

  (reduce (fn [_ cnx]
            (.client.close cnx))
          nil
          pool)
  nil)

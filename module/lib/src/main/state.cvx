{}


;;;;;;;;;;


(defn create-user

  ([env.gen]

   (let [addr-caller *address*
         addr-new    (deploy `(do
                                (set-key ~(.gen (.gen.blob-32)))
                                ~(env.def.code (.gen env.gen
                                                     {:size 10}))))]
     (.account.switch .account.genesis)
     (transfer addr-new
               10000000000)
     (.account.switch addr-caller)
     addr-new)))



(defn create-user+

  [n-account]

  (when (< n-account
           1)
    (fail :ARGUMENT
          "Must generate at least 1 account"))
   (let [-env.gen (env.gen)
         addr.first (create-user -env.gen)]
    (loop [addr.last addr.first
           i         (dec n-account)]
      (if (> i
             0)
        (recur (create-user -env.gen)
               (dec i))
        [addr.first
         addr.last]))))



(defn env.def

  [env]

  (eval (env.def.code env))
  env)



(defn env.def.code

  [env]

  (cons 'do
        (reduce (fn [acc [sym v]]
                  (conj acc
                        `(def ~sym
                              (quote ~v))))
                []
                env)))



(defn env.gen

  []

  (.gen.map (.gen.syntax (.gen.symbol))
            (.gen.any)))





(defn exec


  ([state code]

    (exec nil
          state
          code))


  ([addr state code]

   (let [addr-2 (or addr
                    .account.genesis)
         eval   eval
         [ok?
          x]    (.state.tmp*
                  (.state.switch addr-2
                                 state)
                  [(eval code)
                   *state*])]
     (if ok?
       x
       (.ex.rethrow x)))))




(defn user+

  [state n.user code]

  (let [base.user       (count (:accounts state))
        balance.initial (long (/ (get-in state
                                         [:accounts
                                          (long .account.genesis)
                                          :balance])
                                 n.user))]
    (loop [i.user   0
           state-2  state]
      (if (< i.user
             n.user)
        (recur (inc i.user)
               (second (exec state-2
                             `(let [user (deploy '(do
                                                    (set-key ~(.kp.pubkey (.kp.create (.kp.seed.dev (+ base.user
                                                                                                       i.user)))))
                                                    ~code))]
                                (transfer user
                                          ~balance.initial)))))
        {:base.user base.user
         :n.user    n.user
         :state     state-2}))))
